{"version":3,"file":"LinkWithPreview.js","sourceRoot":"","sources":["../../../src/link/preview/LinkWithPreview.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;;;AAoBb,oBAYC;AA9BD,iCAAiC;AAEjC,2DAA2D;AAC3D,uCAAoC;AACpC,mCAA2C;AAC3C,uCAAwC;AACxC,sGAA8E;AAC9E,oHAA4F;AAC5F,oHAA4F;AAC5F,kCAAsD;AAMtD,MAAM,iBAAiB,GAAG,kBAAkB,CAAC;AAC7C,MAAM,UAAU,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAElE,SAAgB,IAAI,CAAC,KAAsB;IACzC,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;QAClB,IAAI,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;YACnC,OAAO,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;QAC5D,CAAC;QACD,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;YAClB,OAAO,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;QACpE,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;QACxC,CAAC;IACH,CAAC;IACD,OAAO,CAAC,WAAQ,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AACjC,CAAC;AAED,SAAS,eAAe,CAAC,EAAE,OAAO,EAAE,GAAG,IAAI,EAAmB;IAC5D,MAAM,MAAM,GAAG,IAAA,iBAAS,GAAE,CAAC;IAC3B,MAAM,EAAE,iBAAiB,EAAE,cAAc,EAAE,GAAG,IAAA,wCAAoB,GAAE,CAAC;IACrE,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,IAAA,gBAAQ,EAAC,CAAC,CAAC,CAAC;IACpD,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,GAAsB,CAAC;IAEjE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,IAAA,wBAAgB,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAE9D,uDAAuD;IACvD,OAAO,CACL,CAAC,mCAAyB,CACxB,aAAa,CAAC,CAAC,SAAS,CAAC,CACzB,iBAAiB,CAAC,CAAC,GAAG,EAAE;YACtB,OAAO,EAAE,CAAC;YACV,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACxB,eAAe,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;YACpC,oFAAoF;YACpF,UAAU,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CACF,cAAc,CAAC,CAAC,GAAG,EAAE;YACnB,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC,CAAC,CACF,eAAe,CAAC,CAAC,GAAG,EAAE;YACpB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC,CAAC,CACF;MAAA,CAAC,0CAAgC,CAC/B;QAAA,CAAC,WAAQ,CAAC,IAAI,IAAI,CAAC,EACrB;MAAA,EAAE,0CAAgC,CAClC;MAAA,CAAC,0CAAgC,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAChE;QAAA,CAAC,4DAA4D,CAC7D;QAAA,CAAC,cAAc,IAAI,CAAC,iBAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAG,CACpE;MAAA,EAAE,0CAAgC,CACpC;IAAA,EAAE,mCAAyB,CAAC,CAC7B,CAAC;AACJ,CAAC","sourcesContent":["'use client';\n\nimport { useState } from 'react';\n\nimport { usePeekAndPopContext } from './PeekAndPopContext';\nimport { Preview } from './Preview';\nimport { useScreenPreload } from './hooks';\nimport { useRouter } from '../../hooks';\nimport PeekAndPopNativeComponent from '../../specs/PeekAndPopNativeComponent';\nimport PeekAndPopPreviewNativeComponent from '../../specs/PeekAndPopPreviewNativeComponent';\nimport PeekAndPopTriggerNativeComponent from '../../specs/PeekAndPopTriggerNativeComponent';\nimport { Link as ExpoLink, LinkProps } from '../Link';\n\ninterface CustomLinkProps extends LinkProps {\n  preview?: boolean;\n}\n\nconst externalPageRegex = /^(\\w+\\:)?\\/\\/.*$/;\nconst isExternal = (href: string) => externalPageRegex.test(href);\n\nexport function Link(props: CustomLinkProps) {\n  if (props.preview) {\n    if (isExternal(String(props.href))) {\n      console.warn('External links previews are not supported');\n    }\n    if (props.replace) {\n      console.warn('Using replace links with preview is not supported');\n    } else {\n      return <LinkWithPreview {...props} />;\n    }\n  }\n  return <ExpoLink {...props} />;\n}\n\nfunction LinkWithPreview({ preview, ...rest }: CustomLinkProps) {\n  const router = useRouter();\n  const { setIsGlobalTapped, isGlobalTapped } = usePeekAndPopContext();\n  const [numberOfTaps, setNumberOfTaps] = useState(0);\n  const [nativeTag, setNativeTag] = useState<number | undefined>();\n\n  const { preload, getNativeTag } = useScreenPreload(rest.href);\n\n  // TODO: add a way to add and customize preview actions\n  return (\n    <PeekAndPopNativeComponent\n      nextScreenKey={nativeTag}\n      onWillPreviewOpen={() => {\n        preload();\n        setIsGlobalTapped(true);\n        setNumberOfTaps((prev) => prev + 1);\n        // We need to wait here for the screen to preload. This will happen in the next tick\n        setTimeout(() => setNativeTag(getNativeTag()));\n      }}\n      onPreviewClose={() => {\n        setIsGlobalTapped(false);\n      }}\n      onPreviewTapped={() => {\n        router.navigate(rest.href);\n      }}>\n      <PeekAndPopTriggerNativeComponent>\n        <ExpoLink {...rest} />\n      </PeekAndPopTriggerNativeComponent>\n      <PeekAndPopPreviewNativeComponent style={{ position: 'absolute' }}>\n        {/* TODO: Add a way to make preview smaller then full size */}\n        {isGlobalTapped && <Preview key={numberOfTaps} href={rest.href} />}\n      </PeekAndPopPreviewNativeComponent>\n    </PeekAndPopNativeComponent>\n  );\n}\n"]}