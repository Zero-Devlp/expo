{"version":3,"file":"LinkWithPreview.js","sourceRoot":"","sources":["../../../src/link/preview/LinkWithPreview.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport { useState } from 'react';\n\nimport { useLinkPreviewContext } from './LinkPreviewContext';\nimport { Preview } from './Preview';\nimport { useScreenPreload } from './hooks';\nimport { PeekAndPopPreviewView, PeekAndPopTriggerView, PeekAndPopView } from './native';\nimport { useRouter } from '../../hooks';\nimport { Link as ExpoLink, LinkProps } from '../Link';\n\ninterface CustomLinkProps extends LinkProps {\n  preview?: boolean;\n}\n\nconst externalPageRegex = /^(\\w+\\:)?\\/\\/.*$/;\nconst isExternal = (href: string) => externalPageRegex.test(href);\n\nexport function CustomLink(props: CustomLinkProps) {\n  if (props.preview) {\n    if (isExternal(String(props.href))) {\n      console.warn('External links previews are not supported');\n    } else if (props.replace) {\n      console.warn('Using replace links with preview is not supported');\n    } else {\n      return <LinkWithPreview {...props} />;\n    }\n  }\n  return <ExpoLink {...props} />;\n}\n\nfunction LinkWithPreview({ preview, ...rest }: CustomLinkProps) {\n  const router = useRouter();\n  const { setIsPreviewOpen } = useLinkPreviewContext();\n  const [isCurrentPreviewOpen, setIsCurrenPreviewOpen] = useState(false);\n\n  const { preload, updateNativeTag, nativeTag, navigationKey, isValid } = useScreenPreload(\n    rest.href\n  );\n\n  if (!isValid) {\n    console.warn(\n      `Preview link is not within react-native-screens stack. The preview will not work [${rest.href}]`\n    );\n    return <ExpoLink {...rest} />;\n  }\n\n  // TODO: add a way to add and customize preview actions\n  return (\n    <PeekAndPopView\n      nextScreenKey={nativeTag ?? 0}\n      onWillPreviewOpen={() => {\n        preload();\n        setIsPreviewOpen(true);\n        setIsCurrenPreviewOpen(true);\n        // We need to wait here for the screen to preload. This will happen in the next tick\n        setTimeout(updateNativeTag);\n      }}\n      onPreviewWillClose={() => {}}\n      onPreviewDidClose={() => {\n        setIsPreviewOpen(false);\n        setIsCurrenPreviewOpen(false);\n      }}\n      onPreviewTapped={() => {\n        router.navigate(rest.href, { __internal__PeekAndPopKey: navigationKey });\n      }}>\n      <PeekAndPopTriggerView>\n        <ExpoLink {...rest} />\n      </PeekAndPopTriggerView>\n      <PeekAndPopPreviewView style={{ position: 'absolute' }}>\n        {/* TODO: Add a way to make preview smaller then full size */}\n        {isCurrentPreviewOpen && <Preview href={rest.href} />}\n      </PeekAndPopPreviewView>\n    </PeekAndPopView>\n  );\n}\n"]}