{"version":3,"file":"hooks.js","sourceRoot":"","sources":["../../../src/link/preview/hooks.ts"],"names":[],"mappings":";;;;;AAcA,4CAqCC;AA7CD,sEAAsC;AACtC,iCAAuD;AAEvD,uCAAqD;AACrD,uCAAwC;AAExC,uDAAoD;AAEpD,SAAgB,gBAAgB,CAAC,IAAU;IACzC,MAAM,UAAU,GAAG,IAAA,6BAAa,GAAE,CAAC;IACnC,MAAM,MAAM,GAAG,IAAA,iBAAS,GAAE,CAAC;IAC3B,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,IAAA,gBAAQ,GAAsB,CAAC;IAEzE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE,CAAC,IAAA,kCAAwB,EAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEpF,oEAAoE;IACpE,MAAM,mBAAmB,GAAG,IAAA,mBAAW,EAAC,GAAS,EAAE;QACjD,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QAElD,IAAI,KAAK,EAAE,IAAI,KAAK,OAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;YAC5D,OAAO;QACT,CAAC;QAED,MAAM,WAAW,GAAG,KAA4C,CAAC;QAEjE,MAAM,QAAQ,GAAG,WAAW,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;YACvD,wFAAwF;YACxF,IAAI,CAAC,CAAC,MAAM,IAAI,QAAQ,IAAI,CAAC,CAAC,MAAM,IAAI,QAAQ,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;gBAC7D,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,SAAS,EAAE,KAAK,IAAI,IAAA,yBAAO,EAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAClF,CAAC;YACD,OAAO,CAAC,CAAC,IAAI,KAAK,SAAS,EAAE,KAAK,IAAI,IAAA,yBAAO,EAAC,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAClE,CAAC,CAAC,EAAE,GAAG,CAAC;QAER,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;IACxB,MAAM,OAAO,GAAG,IAAA,mBAAW,EAAC,GAAG,EAAE;QAC/B,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEX,OAAO;QACL,OAAO;QACP,mBAAmB;QACnB,aAAa;KACd,CAAC;AACJ,CAAC;AAED,SAAS,YAAY,CACnB,KAAkE;IAElE,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC;QAC3E,OAAO,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;IACvD,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport isEqual from 'fast-deep-equal';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { getParamsAndNodeFromHref } from './Preview';\nimport { useRouter } from '../../hooks';\nimport { Href } from '../../types';\nimport { useNavigation } from '../../useNavigation';\n\nexport function useScreenPreload(href: Href) {\n  const navigation = useNavigation();\n  const router = useRouter();\n  const [navigationKey, setNavigationKey] = useState<string | undefined>();\n\n  const { params, routeNode } = useMemo(() => getParamsAndNodeFromHref(href), [href]);\n\n  // TODO: check if this can be done with listener to navigation state\n  const updateNavigationKey = useCallback((): void => {\n    const state = getLeafState(navigation.getState());\n\n    if (state?.type !== 'stack') {\n      console.warn('Peek and Pop only supports stack navigators');\n      return;\n    }\n\n    const castedState = state as StackNavigationState<ParamListBase>;\n\n    const routeKey = castedState.preloadedRoutes?.find((r) => {\n      // TODO: find out if this is correct solution. This is to cover cases of (.......)/index\n      if (r.params && 'screen' in r.params && 'params' in r.params) {\n        return r.params.screen === routeNode?.route && isEqual(r.params.params, params);\n      }\n      return r.name === routeNode?.route && isEqual(r.params, params);\n    })?.key;\n\n    setNavigationKey(routeKey);\n  }, [params, routeNode]);\n  const preload = useCallback(() => {\n    router.prefetch(href);\n  }, [href]);\n\n  return {\n    preload,\n    updateNavigationKey,\n    navigationKey,\n  };\n}\n\nfunction getLeafState(\n  state: NavigationState | PartialState<NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined {\n  if (state && state.index !== undefined && state.routes[state.index]?.state) {\n    return getLeafState(state.routes[state.index].state);\n  }\n  return state;\n}\n"]}