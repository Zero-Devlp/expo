{"version":3,"file":"hooks.js","sourceRoot":"","sources":["../../../src/link/preview/hooks.ts"],"names":[],"mappings":";;AAsBA,4CAwCC;AAxDD,iCAAkD;AAClD,+DAA4D;AAE5D,uCAAqD;AACrD,uCAAwC;AAExC,uDAAoD;AAIpD,SAAS,aAAa;IACpB,OAAO,IAAA,WAAG,EAAC,2CAAoB,CAAC,CAAC;AACnC,CAAC;AAED,MAAM,cAAc,GAAG,CAAC,CAAS,EAAE,CAAS,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AAEzF,SAAgB,gBAAgB,CAAC,IAAU;IACzC,MAAM,UAAU,GAAG,IAAA,6BAAa,GAAE,CAAC;IACnC,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;IACnC,MAAM,MAAM,GAAG,IAAA,iBAAS,GAAE,CAAC;IAE3B,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE,CAAC,IAAA,kCAAwB,EAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEpF,MAAM,OAAO,GAAG,CAAC,CAAC,UAAU,CAAC;IAE7B,MAAM,YAAY,GAAG,IAAA,mBAAW,EAAC,GAAuB,EAAE;QACxD,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QAElD,IAAI,KAAK,EAAE,IAAI,KAAK,OAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;YAC5D,OAAO;QACT,CAAC;QAED,MAAM,WAAW,GAAG,KAA4C,CAAC;QAEjE,MAAM,QAAQ,GAAG,WAAW,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;YACvD,wFAAwF;YACxF,IAAI,CAAC,CAAC,MAAM,IAAI,QAAQ,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;gBACrC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,SAAS,EAAE,KAAK,IAAI,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YACzF,CAAC;YACD,OAAO,CAAC,CAAC,IAAI,KAAK,SAAS,EAAE,KAAK,IAAI,cAAc,CAAC,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACzE,CAAC,CAAC,EAAE,GAAG,CAAC;QAER,OAAO,QAAQ;YACb,CAAC,CAAE,UAAU,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,OAA+C,EAAE,WAAW;YAC9F,CAAC,CAAC,SAAS,CAAC;IAChB,CAAC,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;IACxB,MAAM,OAAO,GAAG,IAAA,mBAAW,EAAC,GAAG,EAAE;QAC/B,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEX,OAAO;QACL,OAAO;QACP,YAAY;QACZ,OAAO;KACR,CAAC;AACJ,CAAC;AAED,SAAS,YAAY,CACnB,KAAkE;IAElE,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC;QAC3E,OAAO,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;IACvD,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport { use, useCallback, useMemo } from 'react';\nimport { RNSScreensRefContext } from 'react-native-screens';\n\nimport { getParamsAndNodeFromHref } from './Preview';\nimport { useRouter } from '../../hooks';\nimport { Href } from '../../types';\nimport { useNavigation } from '../../useNavigation';\n\ntype Params = Readonly<object | undefined>;\n\nfunction useScreensRef() {\n  return use(RNSScreensRefContext);\n}\n\nconst areParamsEqual = (a: Params, b: Params) => JSON.stringify(a) === JSON.stringify(b);\n\nexport function useScreenPreload(href: Href) {\n  const navigation = useNavigation();\n  const screensRef = useScreensRef();\n  const router = useRouter();\n\n  const { params, routeNode } = useMemo(() => getParamsAndNodeFromHref(href), [href]);\n\n  const isValid = !!screensRef;\n\n  const getNativeTag = useCallback((): number | undefined => {\n    const state = getLeafState(navigation.getState());\n\n    if (state?.type !== 'stack') {\n      console.warn('Peek and Pop only supports stack navigators');\n      return;\n    }\n\n    const castedState = state as StackNavigationState<ParamListBase>;\n\n    const routeKey = castedState.preloadedRoutes?.find((r) => {\n      // TODO: find out if this is correct solution. This is to cover cases of (.......)/index\n      if (r.params && 'screen' in r.params) {\n        return r.params.screen === routeNode?.route && areParamsEqual(r.params.params, params);\n      }\n      return r.name === routeNode?.route && areParamsEqual(r.params, params);\n    })?.key;\n\n    return routeKey\n      ? (screensRef?.current[routeKey]?.current as { __nativeTag: number } | undefined)?.__nativeTag\n      : undefined;\n  }, [params, routeNode]);\n  const preload = useCallback(() => {\n    router.prefetch(href);\n  }, [href]);\n\n  return {\n    preload,\n    getNativeTag,\n    isValid,\n  };\n}\n\nfunction getLeafState(\n  state: NavigationState | PartialState<NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined {\n  if (state && state.index !== undefined && state.routes[state.index]?.state) {\n    return getLeafState(state.routes[state.index].state);\n  }\n  return state;\n}\n"]}