{"version":3,"file":"hooks.js","sourceRoot":"","sources":["../../../src/link/preview/hooks.ts"],"names":[],"mappings":";;AAiBA,4CAiCC;AAjDD,iCAAkD;AAClD,gEAAyE;AAEzE,uCAAqD;AACrD,uCAAwC;AAExC,uDAAoD;AAIpD,SAAS,aAAa;IACpB,OAAO,IAAA,WAAG,EAAC,+BAAoB,CAAC,CAAC;AACnC,CAAC;AAED,MAAM,cAAc,GAAG,CAAC,CAAS,EAAE,CAAS,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AAEzF,SAAgB,gBAAgB,CAAC,IAAU;IACzC,MAAM,UAAU,GAAG,IAAA,6BAAa,GAAE,CAAC;IACnC,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;IACnC,MAAM,MAAM,GAAG,IAAA,iBAAS,GAAE,CAAC;IAE3B,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE,CAAC,IAAA,kCAAwB,EAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEpF,MAAM,YAAY,GAAG,IAAA,mBAAW,EAAC,GAAuB,EAAE;QACxD,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;QAEpC,IAAI,KAAK,EAAE,IAAI,KAAK,OAAO,EAAE,CAAC;YAC5B,OAAO,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;YAC5D,OAAO;QACT,CAAC;QAED,MAAM,WAAW,GAAG,KAA4C,CAAC;QAEjE,MAAM,QAAQ,GAAG,WAAW,CAAC,eAAe,EAAE,IAAI,CAChD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,SAAS,EAAE,KAAK,IAAI,cAAc,CAAC,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CACvE,EAAE,GAAG,CAAC;QAEP,OAAO,QAAQ;YACb,CAAC,CAAE,UAAU,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,OAA+C,EAAE,WAAW;YAC7F,CAAC,CAAC,SAAS,CAAC;IAChB,CAAC,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;IACxB,MAAM,OAAO,GAAG,IAAA,mBAAW,EAAC,GAAG,EAAE;QAC/B,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEX,OAAO;QACL,OAAO;QACP,YAAY;KACb,CAAC;AACJ,CAAC","sourcesContent":["import { ParamListBase, StackNavigationState } from '@react-navigation/native';\nimport { use, useCallback, useMemo } from 'react';\nimport { RNSScreensRefContext } from 'react-native-screens/src/contexts';\n\nimport { getParamsAndNodeFromHref } from './Preview';\nimport { useRouter } from '../../hooks';\nimport { Href } from '../../types';\nimport { useNavigation } from '../../useNavigation';\n\ntype Params = Readonly<object | undefined>;\n\nfunction useScreensRef() {\n  return use(RNSScreensRefContext);\n}\n\nconst areParamsEqual = (a: Params, b: Params) => JSON.stringify(a) === JSON.stringify(b);\n\nexport function useScreenPreload(href: Href) {\n  const navigation = useNavigation();\n  const screensRef = useScreensRef();\n  const router = useRouter();\n\n  const { params, routeNode } = useMemo(() => getParamsAndNodeFromHref(href), [href]);\n\n  const getNativeTag = useCallback((): number | undefined => {\n    const state = navigation.getState();\n\n    if (state?.type !== 'stack') {\n      console.warn('Peek and Pop only supports stack navigators');\n      return;\n    }\n\n    const castedState = state as StackNavigationState<ParamListBase>;\n\n    const routeKey = castedState.preloadedRoutes?.find(\n      (r) => r.name === routeNode?.route && areParamsEqual(r.params, params)\n    )?.key;\n\n    return routeKey\n      ? (screensRef?.current[routeKey].current as { __nativeTag: number } | undefined)?.__nativeTag\n      : undefined;\n  }, [params, routeNode]);\n  const preload = useCallback(() => {\n    router.prefetch(href);\n  }, [href]);\n\n  return {\n    preload,\n    getNativeTag,\n  };\n}\n"]}