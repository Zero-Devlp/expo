{"version":3,"file":"PeekAndPopContext.js","sourceRoot":"","sources":["../../../src/link/preview/PeekAndPopContext.tsx"],"names":[],"mappings":";;;AAAA,iCAA2C;AAE3C,MAAM,iBAAiB,GAAG,IAAA,qBAAa,EAMrC,SAAS,CAAC,CAAC;AAEA,QAAA,yBAAyB,GAAG,iBAAiB,CAAC,QAAQ,CAAC;AAE7D,MAAM,oBAAoB,GAAG,GAAG,EAAE;IACvC,MAAM,OAAO,GAAG,IAAA,WAAG,EAAC,iBAAiB,CAAC,CAAC;IACvC,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;IACpF,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AANW,QAAA,oBAAoB,wBAM/B","sourcesContent":["import { createContext, use } from 'react';\n\nconst PeekAndPopContext = createContext<\n  | {\n      isGlobalTapped: boolean;\n      setIsGlobalTapped: (isTapped: boolean) => void;\n    }\n  | undefined\n>(undefined);\n\nexport const PeekAndPopContextProvider = PeekAndPopContext.Provider;\n\nexport const usePeekAndPopContext = () => {\n  const context = use(PeekAndPopContext);\n  if (context === undefined) {\n    throw new Error('usePreviewContext must be used within a PreviewContextProvider');\n  }\n  return context;\n};\n"]}