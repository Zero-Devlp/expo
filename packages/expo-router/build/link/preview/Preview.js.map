{"version":3,"file":"Preview.js","sourceRoot":"","sources":["../../../src/link/preview/Preview.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;AAab,0BAeC;AAED,4DAcC;AA1CD,iCAAsC;AAGtC,kEAAwD;AAExD,uDAAoD;AACpD,iDAA8D;AAC9D,kCAAqE;AAExD,QAAA,oBAAoB,GAAG,IAAA,qBAAa,EAAkC,SAAS,CAAC,CAAC;AAE9F,SAAgB,OAAO,CAAC,EAAE,IAAI,EAAkB;IAC9C,MAAM,UAAU,GAAG,IAAA,6BAAa,GAAE,CAAC;IACnC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAC;IAE7D,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,SAAS,GAAG,IAAA,uCAA0B,EAAC,SAAS,CAAC,CAAC;IAExD,OAAO,CACL,CAAC,4BAAoB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAC3C;MAAA,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,EACpC;IAAA,EAAE,4BAAoB,CAAC,QAAQ,CAAC,CACjC,CAAC;AACJ,CAAC;AAED,SAAgB,wBAAwB,CAAC,IAAU;IACjD,IAAI,KAAK,GAAG,eAAe,CAAC,IAAW,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;IAC3D,IAAI,SAAS,GAAiC,oBAAK,CAAC,SAAS,CAAC;IAE9D,MAAM,MAAM,GAAwB,EAAE,CAAC;IAEvC,OAAO,KAAK,IAAI,SAAS,EAAE,CAAC;QAC1B,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACnE,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QACpC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QACpB,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC;IAC7E,CAAC;IAED,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;AAC/B,CAAC;AAED,SAAS,eAAe,CAAC,IAAY,EAAE,OAAO,GAAG,EAAE;IACjD,IAAI,GAAG,IAAA,kBAAW,EAAC,IAAW,CAAC,CAAC;IAEhC,IAAI,GAAG,IAAA,oCAA6B,EAAC,IAAI,EAAE,oBAAK,CAAC,YAAY,EAAE,EAAE,OAAO,CAAC,CAAC;IAC1E,OAAO,oBAAK,CAAC,OAAO,EAAE,gBAAiB,CAAC,IAAI,EAAE,oBAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACtE,CAAC","sourcesContent":["'use client';\n\nimport { createContext } from 'react';\n\nimport { RouteNode } from '../../Route';\nimport { store } from '../../global-state/router-store';\nimport { Href, UnknownOutputParams } from '../../types';\nimport { useNavigation } from '../../useNavigation';\nimport { getQualifiedRouteComponent } from '../../useScreens';\nimport { resolveHref, resolveHrefStringWithSegments } from '../href';\n\nexport const PreviewParamsContext = createContext<UnknownOutputParams | undefined>(undefined);\n\nexport function Preview({ href }: { href: Href }) {\n  const navigation = useNavigation();\n  const { routeNode, params } = getParamsAndNodeFromHref(href);\n\n  if (!routeNode) {\n    return null;\n  }\n\n  const Component = getQualifiedRouteComponent(routeNode);\n\n  return (\n    <PreviewParamsContext.Provider value={params}>\n      <Component navigation={navigation} />\n    </PreviewParamsContext.Provider>\n  );\n}\n\nexport function getParamsAndNodeFromHref(href: Href) {\n  let state = getStateForHref(href as any)?.routes[0]?.state;\n  let routeNode: RouteNode | undefined | null = store.routeNode;\n\n  const params: UnknownOutputParams = {};\n\n  while (state && routeNode) {\n    const route = state.routes[state.index || state.routes.length - 1];\n    Object.assign(params, route.params);\n    state = route.state;\n    routeNode = routeNode.children.find((child) => child.route === route.name);\n  }\n\n  return { params, routeNode };\n}\n\nfunction getStateForHref(href: string, options = {}) {\n  href = resolveHref(href as any);\n\n  href = resolveHrefStringWithSegments(href, store.getRouteInfo(), options);\n  return store.linking?.getStateFromPath!(href, store.linking.config);\n}\n"]}