{"version":3,"file":"Link.js","sourceRoot":"","sources":["../../src/link/Link.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n// Fork of @react-navigation/native Link.tsx with `href` and `replace` support added and\n// `to` / `action` support removed.\nimport { PropsWithChildren, useMemo, MouseEvent, JSX, useState, useEffect } from 'react';\nimport { Text, GestureResponderEvent, Platform } from 'react-native';\n\nimport { resolveHref } from './href';\nimport useLinkToPathProps from './useLinkToPathProps';\nimport { useRouter } from '../hooks';\nimport { Href } from '../types';\nimport { useFocusEffect } from '../useFocusEffect';\nimport { useLinkPreviewContext } from './preview/LinkPreviewContext';\nimport { useInteropClassName, useHrefAttrs, LinkProps, WebAnchorProps } from './useLinkHooks';\nimport { Prefetch } from '../Prefetch';\nimport { Slot } from '../ui/Slot';\nimport { Preview } from './preview/Preview';\nimport { useScreenPreload } from './preview/hooks';\nimport { PeekAndPopPreviewView, PeekAndPopTriggerView, PeekAndPopView } from './preview/native';\n\nexport interface LinkComponent {\n  (props: PropsWithChildren<LinkProps>): JSX.Element;\n  /** Helper method to resolve an Href object into a string. */\n  resolveHref: (href: Href) => string;\n}\n\nexport type RedirectProps = {\n  /**\n   * The path of the route to navigate to. It can either be:\n   * - **string**: A full path like `/profile/settings` or a relative path like `../settings`.\n   * - **object**: An object with a `pathname` and optional `params`. The `pathname` can be\n   * a full path like `/profile/settings` or a relative path like `../settings`. The\n   * params can be an object of key-value pairs.\n   *\n   * @example\n   * ```tsx Dynamic\n   * import { Redirect } from 'expo-router';\n   *\n   * export default function RedirectToAbout() {\n   *  return (\n   *    <Redirect href=\"/about\">About</Link>\n   *  );\n   *}\n   * ```\n   */\n  href: Href;\n\n  /**\n   * Relative URL references are either relative to the directory or the document.\n   * By default, relative paths are relative to the document.\n   *\n   * @see [Resolving relative references in Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/API/URL_API/Resolving_relative_references).\n   */\n  relativeToDirectory?: boolean;\n\n  /**\n   * Replaces the initial screen with the current route.\n   */\n  withAnchor?: boolean;\n};\n\n/**\n * Redirects to the `href` as soon as the component is mounted.\n *\n * @example\n * ```tsx\n * import { View, Text } from 'react-native';\n * import { Redirect } from 'expo-router';\n *\n * export default function Page() {\n *  const { user } = useAuth();\n *\n *  if (!user) {\n *    return <Redirect href=\"/login\" />;\n *  }\n *\n *  return (\n *    <View>\n *      <Text>Welcome Back!</Text>\n *    </View>\n *  );\n * }\n * ```\n */\nexport function Redirect({ href, relativeToDirectory, withAnchor }: RedirectProps) {\n  const router = useRouter();\n  useFocusEffect(() => {\n    try {\n      router.replace(href, { relativeToDirectory, withAnchor });\n    } catch (error) {\n      console.error(error);\n    }\n  });\n  return null;\n}\n\n/**\n * Component that renders a link using [`href`](#href) to another route.\n * By default, it accepts children and wraps them in a `<Text>` component.\n *\n * Uses an anchor tag (`<a>`) on web and performs a client-side navigation to preserve\n * the state of the website and navigate faster. The web-only attributes such as `target`,\n * `rel`, and `download` are supported and passed to the anchor tag on web. See\n * [`WebAnchorProps`](#webanchorprops) for more details.\n *\n * > **Note**: Client-side navigation works with both single-page apps,\n * and [static-rendering](/router/reference/static-rendering/).\n *\n * @example\n * ```tsx\n * import { Link } from 'expo-router';\n * import { View } from 'react-native';\n *\n * export default function Route() {\n *  return (\n *   <View>\n *    <Link href=\"/about\">About</Link>\n *   </View>\n *  );\n *}\n * ```\n */\n\nexport function Link(props: LinkProps) {\n  if (props.experimentalPreview) {\n    return <LinkWithPreview {...props} />;\n  }\n  return <ExpoRouterLink {...props} />;\n}\n\nLink.resolveHref = resolveHref;\n\nfunction ExpoRouterLink({\n  href,\n  replace,\n  push,\n  dismissTo,\n  // TODO: This does not prevent default on the anchor tag.\n  relativeToDirectory,\n  asChild,\n  rel,\n  target,\n  download,\n  withAnchor,\n  dangerouslySingular: singular,\n  prefetch,\n  ...rest\n}: LinkProps) {\n  // Mutate the style prop to add the className on web.\n  const style = useInteropClassName(rest);\n\n  // If not passing asChild, we need to forward the props to the anchor tag using React Native Web's `hrefAttrs`.\n  const hrefAttrs = useHrefAttrs({ asChild, rel, target, download });\n\n  const resolvedHref = useMemo(() => {\n    if (href == null) {\n      throw new Error('Link: href is required');\n    }\n    return resolveHref(href);\n  }, [href]);\n\n  let event;\n  if (push) event = 'PUSH';\n  if (replace) event = 'REPLACE';\n  if (dismissTo) event = 'POP_TO';\n\n  const props = useLinkToPathProps({\n    href: resolvedHref,\n    event,\n    relativeToDirectory,\n    withAnchor,\n    dangerouslySingular: singular,\n  });\n\n  const onPress = (e: MouseEvent<HTMLAnchorElement> | GestureResponderEvent) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n    props.onPress(e);\n  };\n\n  const Component = asChild ? Slot : Text;\n\n  // Avoid using createElement directly, favoring JSX, to allow tools like NativeWind to perform custom JSX handling on native.\n  const element = (\n    <Component\n      {...props}\n      {...hrefAttrs}\n      {...rest}\n      style={style}\n      {...Platform.select({\n        web: {\n          onClick: onPress,\n        } as any,\n        default: { onPress },\n      })}\n    />\n  );\n\n  return prefetch ? (\n    <>\n      <Prefetch href={href} />\n      {element}\n    </>\n  ) : (\n    element\n  );\n}\n\nconst externalPageRegex = /^(\\w+:)?\\/\\/.*$/;\nconst isExternal = (href: string) => externalPageRegex.test(href);\n\nexport function LinkWithPreview({ experimentalPreview, ...rest }: LinkProps) {\n  const router = useRouter();\n  const { setIsPreviewOpen } = useLinkPreviewContext();\n  const [isCurrentPreviewOpen, setIsCurrenPreviewOpen] = useState(false);\n  const [previewSize, setPreviewSize] = useState<{ width: number; height: number } | undefined>(\n    undefined\n  );\n\n  const { preload, updateNativeTag, nativeTag, navigationKey, isValid } = useScreenPreload(\n    rest.href\n  );\n\n  useEffect(() => {\n    if (!isValid) {\n      console.warn(\n        `Preview link is not within react-native-screens stack. The preview will not work [${rest.href}]`\n      );\n    }\n    if (isExternal(String(rest.href))) {\n      console.warn('External links previews are not supported');\n    }\n    if (rest.replace) {\n      console.warn('Using replace links with preview is not supported');\n    }\n  }, [isValid, rest.href, rest.replace]);\n\n  console.log(rest);\n\n  if (!isValid || isExternal(String(rest.href)) || rest.replace) {\n    return <ExpoRouterLink {...rest} />;\n  }\n\n  console.log('previewSize', previewSize);\n\n  // TODO: add a way to add and customize preview actions\n  return (\n    <PeekAndPopView\n      nextScreenKey={nativeTag ?? 0}\n      onWillPreviewOpen={() => {\n        preload();\n        setIsPreviewOpen(true);\n        setIsCurrenPreviewOpen(true);\n        // We need to wait here for the screen to preload. This will happen in the next tick\n        setTimeout(updateNativeTag);\n      }}\n      onPreviewWillClose={() => {}}\n      onPreviewDidClose={() => {\n        setIsPreviewOpen(false);\n        setIsCurrenPreviewOpen(false);\n      }}\n      onPreviewTapped={() => {\n        router.navigate(rest.href, { __internal__PeekAndPopKey: navigationKey });\n      }}>\n      <PeekAndPopTriggerView>\n        <ExpoRouterLink {...rest} ref={rest.ref} />\n      </PeekAndPopTriggerView>\n      <PeekAndPopPreviewView\n        onSetSize={({ nativeEvent: size }) => setPreviewSize(size)}\n        style={{ position: 'absolute', ...previewSize }}>\n        {/* TODO: Add a way to make preview smaller then full size */}\n        {isCurrentPreviewOpen && <Preview href={rest.href} />}\n      </PeekAndPopPreviewView>\n    </PeekAndPopView>\n  );\n}\n\nexport { LinkProps, WebAnchorProps };\n"]}